@using Library.Models.Entities
@using Library.Services
@using Library.Data.Repo
@model Product

@inject ProductService _productService
@inject UserRepository _userRepository
@inject OrderService _orderService

@{
    var currentUser = _userRepository.GetUserByToken(Context.Request.Cookies["access-cookie"]);
}

<div class="col-md-4">
    <div class="card mb-4" style="width: 25rem;">
        <div class="card-body">
            <h5 class="card-title">@Model.Title</h5>
            <h6 class="card-subtitle mb-2 text-muted">
            @if (Model.Book != null)
            {
                @:Книга
            }
            else if (Model.Disc != null)
            {
                switch(Model.Disc.DiscType) 
                {
                    case DiscType.Movie : @:Фільм
                    break;
                    case DiscType.Music : @:Музика
                    break;
                    case DiscType.Game : @:Гра
                    break;
                    default : @:Диск
                    break;
                }
            }
            </h6>
            <p class="card-text">
                @if (Model.Book != null)
                {
                    <strong>Автор:</strong> @Model.Book.Author <br />
                    <strong>Жанри:</strong> @string.Join(", ", Model.Book.Genre.Select(g => g.Name))<br /> 
                    <strong>Рік видання:</strong> @Model.Book.PublicationYear
                }
                else if (Model.Disc != null)
                {
                    <strong>Формат:</strong> @Enum.GetName(typeof(DiscFormat), Model.Disc.Format) <br />
                    <strong>Рік:</strong> @Model.Disc.Year <br /> 
                    if (Model.Disc.Movie != null)
                    {
                        <strong>Режисер:</strong> @Model.Disc.Movie.Director <br />
                        <strong>Тривалість:</strong> @Model.Disc.Movie.Duration @:хвилин.  <br />
                        <strong>Жанри:</strong> @string.Join(", ", Model.Disc.Movie.Genre.Select(g => g.Name))<br />
                        <strong>Актори:</strong> 
                        @string.Join(", ", Model.Disc.Movie.Actors.Select(a => a.Name))
                    }
                    else if (Model.Disc.Music != null)
                    {
                        <strong>Артист:</strong> @Model.Disc.Music.Artist <br />
                        <strong>Жанри:</strong> @string.Join(", ", Model.Disc.Music.Genre.Select(g => g.Name))<br />
                        <strong>Треки:</strong> @Model.Disc.Music.TrackCount
                    }
                    else if (Model.Disc.Game != null)
                    {
                        <strong>Жанри:</strong> @string.Join(", ", Model.Disc.Game.Genre.Select(g => g.Name)) <br />
                        <strong>Видавець:</strong> @Model.Disc.Game.Publisher <br />
                        <strong>Розробник:</strong> @Model.Disc.Game.Developer
                    }
                }
                <br />
                <strong>Власник:</strong> @Model.Owner.Login <br />
                @if (await _productService.IsProductBorrowed(Model.ProductId))
                {
                    var borrow = await _productService.GetBorrowByProductId(Model.ProductId);
                    var (timeText, overdue) = GetRemainingTimeText(borrow.BorrowEndDate);

                    <strong>Позичено користувачу:</strong> @($"{borrow.Borrower.Login} ({borrow.Borrower.Email})") <br />
                    <strong>Позичено:</strong> @(borrow.BorrowStartDate.ToString("dd.MM.yyyy"))<br />
                    <strong>Потрібно повернути:</strong> @(borrow.BorrowEndDate.ToString("dd.MM.yyyy"))<br />
                    <p class="@(overdue ? "text-danger" : "")">
                        <strong>@(overdue ? "Час позичання вичерпано!" : "Залишилось")</strong><br />
                        @timeText
                    </p>
                }
                else if (await _productService.IsProductOrdered(Model.ProductId))
                {
                    var order = await _orderService.GetOrderedOrder(Model.ProductId);
                    var (timeText, overdue) = GetRemainingTimeText(order.EndDate.Value);
                    @* <strong>Замовлено користувачу:</strong> @($"{order.User.Login} ({order.User.Email})") <br /> *@
                    <strong>Дата замовлення:</strong> @(order.StartDate?.ToString("dd.MM.yyyy"))<br />
                    <strong>Дата повернення:</strong> @(order.EndDate?.ToString("dd.MM.yyyy"))<br />
                    <p class="@(overdue ? "text-danger" : "")">
                        <strong>@(overdue ? "Час повернення вичерпано!" : "Залишилось")</strong><br />
                        @timeText
                    </p>
                }
            </p>

            
            @* Actions *@
            @if(currentUser != null){
                @if(!await _productService.IsProductForOrder(Model.ProductId)){
                    @if(currentUser.Role == Roles.Administrator || currentUser.Role == Roles.Owner || currentUser.Role == Roles.Operator){
                        <a href="@Url.Action("Update", "Catalog", new { id = Model.ProductId })" class="card-link">Редагувати</a>
                        <a href="@Url.Action("Delete", "Catalog", new { id = Model.ProductId })" class="card-link text-danger">Видалити</a>
                    }
                    @if (!await _productService.IsProductBorrowed(Model.ProductId))
                    {
                        if(!await _productService.IsUserOwner(Model.ProductId, Context.Request.Cookies["access-cookie"])){
                            <a href="@Url.Action("Borrow", "Catalog", new { id = Model.ProductId })" class="card-link text-secondary">Позичити собі</a>
                        }
                        else{
                            <a href="@Url.Action("Give", "Catalog", new { id = Model.ProductId })" class="card-link text-secondary">Позичити комусь</a>
                        }
                        
                    }
                    else if(await _productService.IsProductBorrowedByUser(Model.ProductId, Context.Request.Cookies["access-cookie"])){
                        <a href="@Url.Action("Return", "Catalog", new { id = Model.ProductId })" class="card-link text-info">Повернути</a>
                    }
                }
                else if(!await _productService.IsProductOrdered(Model.ProductId)){
                    <a href="@Url.Action("Product", "Order", new { id = Model.ProductId })" class="card-link text-info">Оформити замовлення</a>
                }
                else if(await _productService.IsProductOrderedByUser(Model.ProductId, Context.Request.Cookies["access-cookie"])){
                    <a href="@Url.Action("Return", "Order", new { id = Model.ProductId })" class="card-link text-info">Повернути</a>
                }
            }
        </div>
    </div>
</div>


@functions {
    private (string, bool) GetRemainingTimeText(DateTime endDate)
    {
        var remainingTime = endDate - DateTime.Now;
        bool isOverdue = remainingTime.TotalSeconds < 0;
        var days = Math.Abs(remainingTime.Days);
        var hours = Math.Abs(remainingTime.Hours);
        
        return ($"{days} днів та {hours} годин", isOverdue);
    }
}